{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Shane.Jemmotte\\\\source\\\\repos\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import'bootstrap';import'jquery-validation';import'jquery-validation-unobtrusive';import*as Redux from'redux';import React from'react';import{render}from'react-dom';import{Provider}from'react-redux';import App from'./App';import*as system from'./system/system';import*as serviceWorker from'./serviceWorker';import UserActions from'./app/state/entities/user/actions';import appReducer from'./app/state/app/reducers';import entityReducer from'./app/state/entities/reducers';var rootReducer=Redux.combineReducers({appReducer:appReducer,entityReducer:entityReducer});function boot(){var MODULE_ID,store;return _regeneratorRuntime.async(function boot$(_context){while(1){switch(_context.prev=_context.next){case 0:MODULE_ID='';store=system.store();// set environment to be visible on global scope\nwindow.process={env:{NODE_ENV:process.env.NODE_ENV}};// set base url for api calls\nsystem.apiService.setBaseUrl(\"/api/\");system.apiService.setPrivateApiDomain(\"myhome\");//system.apiService.setMockBaseUrl(MOCK_SERVICE_URL);\n// fetch access token (for dev-mode impersonation)\n//await apiService.getAccessToken();\n// register root reducer with store\n//store.replaceReducer(reducer);\n// this is to work around the caveat in reduce-reducers\n// which is that each secondary reducer has to be initialised manually\n//store.dispatch({ type: ActionTypes.ROUTE_REDUCERS_INIT});\ndebugger;store.dispatch(UserActions.fetchCurrentUser(1));// apply module and activity permissions\n//await permissionsService.apply(MODULE_ID);\n// set initial route to load if route is empty (/)\n//locationReduxBinder.defaultRoute = '/overview/dashboard';\n// load the root element\nrender(React.createElement(Provider,{store:store},React.createElement(App,null)),document.getElementById('root'));serviceWorker.unregister();case 9:case\"end\":return _context.stop();}}});}boot();","map":{"version":3,"sources":["C:/Users/Shane.Jemmotte/source/repos/my-app/src/index.tsx"],"names":["Redux","React","render","Provider","App","system","serviceWorker","UserActions","appReducer","entityReducer","rootReducer","combineReducers","boot","MODULE_ID","store","window","process","env","NODE_ENV","apiService","setBaseUrl","setPrivateApiDomain","dispatch","fetchCurrentUser","document","getElementById","unregister"],"mappings":"mKAAA,MAAO,WAAP,CACA,MAAO,mBAAP,CACA,MAAO,+BAAP,CACA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,KAAuB,WAAvB,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,iBAAxB,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,iBAA/B,CACA,MAAOC,CAAAA,WAAP,KAAwB,mCAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,+BAA1B,CAGA,GAAMC,CAAAA,WAAgB,CAAGV,KAAK,CAACW,eAAN,CAAsB,CAC3CH,UAAU,CAAVA,UAD2C,CAE3CC,aAAa,CAAbA,aAF2C,CAAtB,CAAzB,CAKA,QAAeG,CAAAA,IAAf,qIACUC,SADV,CACsB,EADtB,CAEUC,KAFV,CAEkBT,MAAM,CAACS,KAAP,EAFlB,CAGI;AACCC,MAAD,CAAgBC,OAAhB,CAA0B,CAAEC,GAAG,CAAE,CAAEC,QAAQ,CAAEF,OAAO,CAACC,GAAR,CAAYC,QAAxB,CAAP,CAA1B,CAEA;AACAb,MAAM,CAACc,UAAP,CAAkBC,UAAlB,UACAf,MAAM,CAACc,UAAP,CAAkBE,mBAAlB,WACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA,SACAP,KAAK,CAACQ,QAAN,CAAef,WAAW,CAACgB,gBAAZ,CAA6B,CAA7B,CAAf,EAEA;AACA;AAEA;AACA;AAEA;AACArB,MAAM,CACF,oBAAC,QAAD,EAAU,KAAK,CAAEY,KAAjB,EACI,oBAAC,GAAD,MADJ,CADE,CAIDU,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJC,CAAN,CAMHnB,aAAa,CAACoB,UAAd,GArCD,8CAuCAd,IAAI","sourcesContent":["import 'bootstrap'\nimport 'jquery-validation'\nimport 'jquery-validation-unobtrusive'\nimport * as Redux from 'redux';\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport * as system from './system/system';\nimport * as serviceWorker from './serviceWorker';\nimport UserActions from './app/state/entities/user/actions';\nimport appReducer from './app/state/app/reducers'\nimport entityReducer from './app/state/entities/reducers'\n\ndeclare var MOCK_SERVICE_URL: string;\nconst rootReducer: any = Redux.combineReducers({\n    appReducer,\n    entityReducer,\n});\n\nasync function boot() {\n    const MODULE_ID = '';\n    const store = system.store();\n    // set environment to be visible on global scope\n    (window as any).process = { env: { NODE_ENV: process.env.NODE_ENV } };\n\n    // set base url for api calls\n    system.apiService.setBaseUrl(`/api/`);\n    system.apiService.setPrivateApiDomain(`myhome`);\n    //system.apiService.setMockBaseUrl(MOCK_SERVICE_URL);\n\n    // fetch access token (for dev-mode impersonation)\n    //await apiService.getAccessToken();\n\n    // register root reducer with store\n    //store.replaceReducer(reducer);\n\n    // this is to work around the caveat in reduce-reducers\n    // which is that each secondary reducer has to be initialised manually\n    //store.dispatch({ type: ActionTypes.ROUTE_REDUCERS_INIT});\n\n    debugger;\n    store.dispatch(UserActions.fetchCurrentUser(1));\n\n    // apply module and activity permissions\n    //await permissionsService.apply(MODULE_ID);\n\n    // set initial route to load if route is empty (/)\n    //locationReduxBinder.defaultRoute = '/overview/dashboard';\n\n    // load the root element\n    render(\n        <Provider store={store}>\n            <App/>\n        </Provider>\n        ,document.getElementById('root')\n    )\n\tserviceWorker.unregister();\n}\nboot();\n"]},"metadata":{},"sourceType":"module"}