{"ast":null,"code":"// Unobtrusive validation support library for jQuery and jQuery Validate\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// @version v3.2.11\n\n/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */\n\n/*global document: false, jQuery: false */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(\"jquery.validate.unobtrusive\", ['jquery-validation'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports     \n    module.exports = factory(require('jquery-validation'));\n  } else {\n    // Browser global\n    jQuery.validator.unobtrusive = factory(jQuery);\n  }\n})(function ($) {\n  var $jQval = $.validator,\n      adapters,\n      data_validation = \"unobtrusiveValidation\";\n\n  function setValidationValues(options, ruleName, value) {\n    options.rules[ruleName] = value;\n\n    if (options.message) {\n      options.messages[ruleName] = options.message;\n    }\n  }\n\n  function splitAndTrim(value) {\n    return value.replace(/^\\s+|\\s+$/g, \"\").split(/\\s*,\\s*/g);\n  }\n\n  function escapeAttributeValue(value) {\n    // As mentioned on http://api.jquery.com/category/selectors/\n    return value.replace(/([!\"#$%&'()*+,./:;<=>?@\\[\\\\\\]^`{|}~])/g, \"\\\\$1\");\n  }\n\n  function getModelPrefix(fieldName) {\n    return fieldName.substr(0, fieldName.lastIndexOf(\".\") + 1);\n  }\n\n  function appendModelPrefix(value, prefix) {\n    if (value.indexOf(\"*.\") === 0) {\n      value = value.replace(\"*.\", prefix);\n    }\n\n    return value;\n  }\n\n  function onError(error, inputElement) {\n    // 'this' is the form element\n    var container = $(this).find(\"[data-valmsg-for='\" + escapeAttributeValue(inputElement[0].name) + \"']\"),\n        replaceAttrValue = container.attr(\"data-valmsg-replace\"),\n        replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;\n    container.removeClass(\"field-validation-valid\").addClass(\"field-validation-error\");\n    error.data(\"unobtrusiveContainer\", container);\n\n    if (replace) {\n      container.empty();\n      error.removeClass(\"input-validation-error\").appendTo(container);\n    } else {\n      error.hide();\n    }\n  }\n\n  function onErrors(event, validator) {\n    // 'this' is the form element\n    var container = $(this).find(\"[data-valmsg-summary=true]\"),\n        list = container.find(\"ul\");\n\n    if (list && list.length && validator.errorList.length) {\n      list.empty();\n      container.addClass(\"validation-summary-errors\").removeClass(\"validation-summary-valid\");\n      $.each(validator.errorList, function () {\n        $(\"<li />\").html(this.message).appendTo(list);\n      });\n    }\n  }\n\n  function onSuccess(error) {\n    // 'this' is the form element\n    var container = error.data(\"unobtrusiveContainer\");\n\n    if (container) {\n      var replaceAttrValue = container.attr(\"data-valmsg-replace\"),\n          replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;\n      container.addClass(\"field-validation-valid\").removeClass(\"field-validation-error\");\n      error.removeData(\"unobtrusiveContainer\");\n\n      if (replace) {\n        container.empty();\n      }\n    }\n  }\n\n  function onReset(event) {\n    // 'this' is the form element\n    var $form = $(this),\n        key = '__jquery_unobtrusive_validation_form_reset';\n\n    if ($form.data(key)) {\n      return;\n    } // Set a flag that indicates we're currently resetting the form.\n\n\n    $form.data(key, true);\n\n    try {\n      $form.data(\"validator\").resetForm();\n    } finally {\n      $form.removeData(key);\n    }\n\n    $form.find(\".validation-summary-errors\").addClass(\"validation-summary-valid\").removeClass(\"validation-summary-errors\");\n    $form.find(\".field-validation-error\").addClass(\"field-validation-valid\").removeClass(\"field-validation-error\").removeData(\"unobtrusiveContainer\").find(\">*\") // If we were using valmsg-replace, get the underlying error\n    .removeData(\"unobtrusiveContainer\");\n  }\n\n  function validationInfo(form) {\n    var $form = $(form),\n        result = $form.data(data_validation),\n        onResetProxy = $.proxy(onReset, form),\n        defaultOptions = $jQval.unobtrusive.options || {},\n        execInContext = function execInContext(name, args) {\n      var func = defaultOptions[name];\n      func && $.isFunction(func) && func.apply(form, args);\n    };\n\n    if (!result) {\n      result = {\n        options: {\n          // options structure passed to jQuery Validate's validate() method\n          errorClass: defaultOptions.errorClass || \"input-validation-error\",\n          errorElement: defaultOptions.errorElement || \"span\",\n          errorPlacement: function errorPlacement() {\n            onError.apply(form, arguments);\n            execInContext(\"errorPlacement\", arguments);\n          },\n          invalidHandler: function invalidHandler() {\n            onErrors.apply(form, arguments);\n            execInContext(\"invalidHandler\", arguments);\n          },\n          messages: {},\n          rules: {},\n          success: function success() {\n            onSuccess.apply(form, arguments);\n            execInContext(\"success\", arguments);\n          }\n        },\n        attachValidation: function attachValidation() {\n          $form.off(\"reset.\" + data_validation, onResetProxy).on(\"reset.\" + data_validation, onResetProxy).validate(this.options);\n        },\n        validate: function validate() {\n          // a validation function that is called by unobtrusive Ajax\n          $form.validate();\n          return $form.valid();\n        }\n      };\n      $form.data(data_validation, result);\n    }\n\n    return result;\n  }\n\n  $jQval.unobtrusive = {\n    adapters: [],\n    parseElement: function parseElement(element, skipAttach) {\n      /// <summary>\n      /// Parses a single HTML element for unobtrusive validation attributes.\n      /// </summary>\n      /// <param name=\"element\" domElement=\"true\">The HTML element to be parsed.</param>\n      /// <param name=\"skipAttach\" type=\"Boolean\">[Optional] true to skip attaching the\n      /// validation to the form. If parsing just this single element, you should specify true.\n      /// If parsing several elements, you should specify false, and manually attach the validation\n      /// to the form when you are finished. The default is false.</param>\n      var $element = $(element),\n          form = $element.parents(\"form\")[0],\n          valInfo,\n          rules,\n          messages;\n\n      if (!form) {\n        // Cannot do client-side validation without a form\n        return;\n      }\n\n      valInfo = validationInfo(form);\n      valInfo.options.rules[element.name] = rules = {};\n      valInfo.options.messages[element.name] = messages = {};\n      $.each(this.adapters, function () {\n        var prefix = \"data-val-\" + this.name,\n            message = $element.attr(prefix),\n            paramValues = {};\n\n        if (message !== undefined) {\n          // Compare against undefined, because an empty message is legal (and falsy)\n          prefix += \"-\";\n          $.each(this.params, function () {\n            paramValues[this] = $element.attr(prefix + this);\n          });\n          this.adapt({\n            element: element,\n            form: form,\n            message: message,\n            params: paramValues,\n            rules: rules,\n            messages: messages\n          });\n        }\n      });\n      $.extend(rules, {\n        \"__dummy__\": true\n      });\n\n      if (!skipAttach) {\n        valInfo.attachValidation();\n      }\n    },\n    parse: function parse(selector) {\n      /// <summary>\n      /// Parses all the HTML elements in the specified selector. It looks for input elements decorated\n      /// with the [data-val=true] attribute value and enables validation according to the data-val-*\n      /// attribute values.\n      /// </summary>\n      /// <param name=\"selector\" type=\"String\">Any valid jQuery selector.</param>\n      // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one\n      // element with data-val=true\n      var $selector = $(selector),\n          $forms = $selector.parents().addBack().filter(\"form\").add($selector.find(\"form\")).has(\"[data-val=true]\");\n      $selector.find(\"[data-val=true]\").each(function () {\n        $jQval.unobtrusive.parseElement(this, true);\n      });\n      $forms.each(function () {\n        var info = validationInfo(this);\n\n        if (info) {\n          info.attachValidation();\n        }\n      });\n    }\n  };\n  adapters = $jQval.unobtrusive.adapters;\n\n  adapters.add = function (adapterName, params, fn) {\n    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>\n    /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n    /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n    /// <param name=\"params\" type=\"Array\" optional=\"true\">[Optional] An array of parameter names (strings) that will\n    /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and\n    /// mmmm is the parameter name).</param>\n    /// <param name=\"fn\" type=\"Function\">The function to call, which adapts the values from the HTML\n    /// attributes into jQuery Validate rules and/or messages.</param>\n    /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n    if (!fn) {\n      // Called with no params, just a function\n      fn = params;\n      params = [];\n    }\n\n    this.push({\n      name: adapterName,\n      params: params,\n      adapt: fn\n    });\n    return this;\n  };\n\n  adapters.addBool = function (adapterName, ruleName) {\n    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n    /// the jQuery Validate validation rule has no parameter values.</summary>\n    /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n    /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n    /// <param name=\"ruleName\" type=\"String\" optional=\"true\">[Optional] The name of the jQuery Validate rule. If not provided, the value\n    /// of adapterName will be used instead.</param>\n    /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n    return this.add(adapterName, function (options) {\n      setValidationValues(options, ruleName || adapterName, true);\n    });\n  };\n\n  adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {\n    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n    /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and\n    /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>\n    /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n    /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n    /// <param name=\"minRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you only\n    /// have a minimum value.</param>\n    /// <param name=\"maxRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you only\n    /// have a maximum value.</param>\n    /// <param name=\"minMaxRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you\n    /// have both a minimum and maximum value.</param>\n    /// <param name=\"minAttribute\" type=\"String\" optional=\"true\">[Optional] The name of the HTML attribute that\n    /// contains the minimum value. The default is \"min\".</param>\n    /// <param name=\"maxAttribute\" type=\"String\" optional=\"true\">[Optional] The name of the HTML attribute that\n    /// contains the maximum value. The default is \"max\".</param>\n    /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n    return this.add(adapterName, [minAttribute || \"min\", maxAttribute || \"max\"], function (options) {\n      var min = options.params.min,\n          max = options.params.max;\n\n      if (min && max) {\n        setValidationValues(options, minMaxRuleName, [min, max]);\n      } else if (min) {\n        setValidationValues(options, minRuleName, min);\n      } else if (max) {\n        setValidationValues(options, maxRuleName, max);\n      }\n    });\n  };\n\n  adapters.addSingleVal = function (adapterName, attribute, ruleName) {\n    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n    /// the jQuery Validate validation rule has a single value.</summary>\n    /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n    /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>\n    /// <param name=\"attribute\" type=\"String\">[Optional] The name of the HTML attribute that contains the value.\n    /// The default is \"val\".</param>\n    /// <param name=\"ruleName\" type=\"String\" optional=\"true\">[Optional] The name of the jQuery Validate rule. If not provided, the value\n    /// of adapterName will be used instead.</param>\n    /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n    return this.add(adapterName, [attribute || \"val\"], function (options) {\n      setValidationValues(options, ruleName || adapterName, options.params[attribute]);\n    });\n  };\n\n  $jQval.addMethod(\"__dummy__\", function (value, element, params) {\n    return true;\n  });\n  $jQval.addMethod(\"regex\", function (value, element, params) {\n    var match;\n\n    if (this.optional(element)) {\n      return true;\n    }\n\n    match = new RegExp(params).exec(value);\n    return match && match.index === 0 && match[0].length === value.length;\n  });\n  $jQval.addMethod(\"nonalphamin\", function (value, element, nonalphamin) {\n    var match;\n\n    if (nonalphamin) {\n      match = value.match(/\\W/g);\n      match = match && match.length >= nonalphamin;\n    }\n\n    return match;\n  });\n\n  if ($jQval.methods.extension) {\n    adapters.addSingleVal(\"accept\", \"mimtype\");\n    adapters.addSingleVal(\"extension\", \"extension\");\n  } else {\n    // for backward compatibility, when the 'extension' validation method does not exist, such as with versions\n    // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for\n    // validating the extension, and ignore mime-type validations as they are not supported.\n    adapters.addSingleVal(\"extension\", \"extension\", \"accept\");\n  }\n\n  adapters.addSingleVal(\"regex\", \"pattern\");\n  adapters.addBool(\"creditcard\").addBool(\"date\").addBool(\"digits\").addBool(\"email\").addBool(\"number\").addBool(\"url\");\n  adapters.addMinMax(\"length\", \"minlength\", \"maxlength\", \"rangelength\").addMinMax(\"range\", \"min\", \"max\", \"range\");\n  adapters.addMinMax(\"minlength\", \"minlength\").addMinMax(\"maxlength\", \"minlength\", \"maxlength\");\n  adapters.add(\"equalto\", [\"other\"], function (options) {\n    var prefix = getModelPrefix(options.element.name),\n        other = options.params.other,\n        fullOtherName = appendModelPrefix(other, prefix),\n        element = $(options.form).find(\":input\").filter(\"[name='\" + escapeAttributeValue(fullOtherName) + \"']\")[0];\n    setValidationValues(options, \"equalTo\", element);\n  });\n  adapters.add(\"required\", function (options) {\n    // jQuery Validate equates \"required\" with \"mandatory\" for checkbox elements\n    if (options.element.tagName.toUpperCase() !== \"INPUT\" || options.element.type.toUpperCase() !== \"CHECKBOX\") {\n      setValidationValues(options, \"required\", true);\n    }\n  });\n  adapters.add(\"remote\", [\"url\", \"type\", \"additionalfields\"], function (options) {\n    var value = {\n      url: options.params.url,\n      type: options.params.type || \"GET\",\n      data: {}\n    },\n        prefix = getModelPrefix(options.element.name);\n    $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {\n      var paramName = appendModelPrefix(fieldName, prefix);\n\n      value.data[paramName] = function () {\n        var field = $(options.form).find(\":input\").filter(\"[name='\" + escapeAttributeValue(paramName) + \"']\"); // For checkboxes and radio buttons, only pick up values from checked fields.\n\n        if (field.is(\":checkbox\")) {\n          return field.filter(\":checked\").val() || field.filter(\":hidden\").val() || '';\n        } else if (field.is(\":radio\")) {\n          return field.filter(\":checked\").val() || '';\n        }\n\n        return field.val();\n      };\n    });\n    setValidationValues(options, \"remote\", value);\n  });\n  adapters.add(\"password\", [\"min\", \"nonalphamin\", \"regex\"], function (options) {\n    if (options.params.min) {\n      setValidationValues(options, \"minlength\", options.params.min);\n    }\n\n    if (options.params.nonalphamin) {\n      setValidationValues(options, \"nonalphamin\", options.params.nonalphamin);\n    }\n\n    if (options.params.regex) {\n      setValidationValues(options, \"regex\", options.params.regex);\n    }\n  });\n  adapters.add(\"fileextensions\", [\"extensions\"], function (options) {\n    setValidationValues(options, \"extension\", options.params.extensions);\n  });\n  $(function () {\n    $jQval.unobtrusive.parse(document);\n  });\n  return $jQval.unobtrusive;\n});","map":{"version":3,"sources":["C:/Users/Shane.Jemmotte/source/repos/my-app/node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js"],"names":["factory","define","amd","module","exports","require","jQuery","validator","unobtrusive","$","$jQval","adapters","data_validation","setValidationValues","options","ruleName","value","rules","message","messages","splitAndTrim","replace","split","escapeAttributeValue","getModelPrefix","fieldName","substr","lastIndexOf","appendModelPrefix","prefix","indexOf","onError","error","inputElement","container","find","name","replaceAttrValue","attr","parseJSON","removeClass","addClass","data","empty","appendTo","hide","onErrors","event","list","length","errorList","each","html","onSuccess","removeData","onReset","$form","key","resetForm","validationInfo","form","result","onResetProxy","proxy","defaultOptions","execInContext","args","func","isFunction","apply","errorClass","errorElement","errorPlacement","arguments","invalidHandler","success","attachValidation","off","on","validate","valid","parseElement","element","skipAttach","$element","parents","valInfo","paramValues","undefined","params","adapt","extend","parse","selector","$selector","$forms","addBack","filter","add","has","info","adapterName","fn","push","addBool","addMinMax","minRuleName","maxRuleName","minMaxRuleName","minAttribute","maxAttribute","min","max","addSingleVal","attribute","addMethod","match","optional","RegExp","exec","index","nonalphamin","methods","extension","other","fullOtherName","tagName","toUpperCase","type","url","additionalfields","i","paramName","field","is","val","regex","extensions","document"],"mappings":"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","sourcesContent":["// Unobtrusive validation support library for jQuery and jQuery Validate\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// @version v3.2.11\n\n/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */\n/*global document: false, jQuery: false */\n\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(\"jquery.validate.unobtrusive\", ['jquery-validation'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // CommonJS-like environments that support module.exports     \n        module.exports = factory(require('jquery-validation'));\n    } else {\n        // Browser global\n        jQuery.validator.unobtrusive = factory(jQuery);\n    }\n}(function ($) {\n    var $jQval = $.validator,\n        adapters,\n        data_validation = \"unobtrusiveValidation\";\n\n    function setValidationValues(options, ruleName, value) {\n        options.rules[ruleName] = value;\n        if (options.message) {\n            options.messages[ruleName] = options.message;\n        }\n    }\n\n    function splitAndTrim(value) {\n        return value.replace(/^\\s+|\\s+$/g, \"\").split(/\\s*,\\s*/g);\n    }\n\n    function escapeAttributeValue(value) {\n        // As mentioned on http://api.jquery.com/category/selectors/\n        return value.replace(/([!\"#$%&'()*+,./:;<=>?@\\[\\\\\\]^`{|}~])/g, \"\\\\$1\");\n    }\n\n    function getModelPrefix(fieldName) {\n        return fieldName.substr(0, fieldName.lastIndexOf(\".\") + 1);\n    }\n\n    function appendModelPrefix(value, prefix) {\n        if (value.indexOf(\"*.\") === 0) {\n            value = value.replace(\"*.\", prefix);\n        }\n        return value;\n    }\n\n    function onError(error, inputElement) {  // 'this' is the form element\n        var container = $(this).find(\"[data-valmsg-for='\" + escapeAttributeValue(inputElement[0].name) + \"']\"),\n            replaceAttrValue = container.attr(\"data-valmsg-replace\"),\n            replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;\n\n        container.removeClass(\"field-validation-valid\").addClass(\"field-validation-error\");\n        error.data(\"unobtrusiveContainer\", container);\n\n        if (replace) {\n            container.empty();\n            error.removeClass(\"input-validation-error\").appendTo(container);\n        }\n        else {\n            error.hide();\n        }\n    }\n\n    function onErrors(event, validator) {  // 'this' is the form element\n        var container = $(this).find(\"[data-valmsg-summary=true]\"),\n            list = container.find(\"ul\");\n\n        if (list && list.length && validator.errorList.length) {\n            list.empty();\n            container.addClass(\"validation-summary-errors\").removeClass(\"validation-summary-valid\");\n\n            $.each(validator.errorList, function () {\n                $(\"<li />\").html(this.message).appendTo(list);\n            });\n        }\n    }\n\n    function onSuccess(error) {  // 'this' is the form element\n        var container = error.data(\"unobtrusiveContainer\");\n\n        if (container) {\n            var replaceAttrValue = container.attr(\"data-valmsg-replace\"),\n                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;\n\n            container.addClass(\"field-validation-valid\").removeClass(\"field-validation-error\");\n            error.removeData(\"unobtrusiveContainer\");\n\n            if (replace) {\n                container.empty();\n            }\n        }\n    }\n\n    function onReset(event) {  // 'this' is the form element\n        var $form = $(this),\n            key = '__jquery_unobtrusive_validation_form_reset';\n        if ($form.data(key)) {\n            return;\n        }\n        // Set a flag that indicates we're currently resetting the form.\n        $form.data(key, true);\n        try {\n            $form.data(\"validator\").resetForm();\n        } finally {\n            $form.removeData(key);\n        }\n\n        $form.find(\".validation-summary-errors\")\n            .addClass(\"validation-summary-valid\")\n            .removeClass(\"validation-summary-errors\");\n        $form.find(\".field-validation-error\")\n            .addClass(\"field-validation-valid\")\n            .removeClass(\"field-validation-error\")\n            .removeData(\"unobtrusiveContainer\")\n            .find(\">*\")  // If we were using valmsg-replace, get the underlying error\n            .removeData(\"unobtrusiveContainer\");\n    }\n\n    function validationInfo(form) {\n        var $form = $(form),\n            result = $form.data(data_validation),\n            onResetProxy = $.proxy(onReset, form),\n            defaultOptions = $jQval.unobtrusive.options || {},\n            execInContext = function (name, args) {\n                var func = defaultOptions[name];\n                func && $.isFunction(func) && func.apply(form, args);\n            };\n\n        if (!result) {\n            result = {\n                options: {  // options structure passed to jQuery Validate's validate() method\n                    errorClass: defaultOptions.errorClass || \"input-validation-error\",\n                    errorElement: defaultOptions.errorElement || \"span\",\n                    errorPlacement: function () {\n                        onError.apply(form, arguments);\n                        execInContext(\"errorPlacement\", arguments);\n                    },\n                    invalidHandler: function () {\n                        onErrors.apply(form, arguments);\n                        execInContext(\"invalidHandler\", arguments);\n                    },\n                    messages: {},\n                    rules: {},\n                    success: function () {\n                        onSuccess.apply(form, arguments);\n                        execInContext(\"success\", arguments);\n                    }\n                },\n                attachValidation: function () {\n                    $form\n                        .off(\"reset.\" + data_validation, onResetProxy)\n                        .on(\"reset.\" + data_validation, onResetProxy)\n                        .validate(this.options);\n                },\n                validate: function () {  // a validation function that is called by unobtrusive Ajax\n                    $form.validate();\n                    return $form.valid();\n                }\n            };\n            $form.data(data_validation, result);\n        }\n\n        return result;\n    }\n\n    $jQval.unobtrusive = {\n        adapters: [],\n\n        parseElement: function (element, skipAttach) {\n            /// <summary>\n            /// Parses a single HTML element for unobtrusive validation attributes.\n            /// </summary>\n            /// <param name=\"element\" domElement=\"true\">The HTML element to be parsed.</param>\n            /// <param name=\"skipAttach\" type=\"Boolean\">[Optional] true to skip attaching the\n            /// validation to the form. If parsing just this single element, you should specify true.\n            /// If parsing several elements, you should specify false, and manually attach the validation\n            /// to the form when you are finished. The default is false.</param>\n            var $element = $(element),\n                form = $element.parents(\"form\")[0],\n                valInfo, rules, messages;\n\n            if (!form) {  // Cannot do client-side validation without a form\n                return;\n            }\n\n            valInfo = validationInfo(form);\n            valInfo.options.rules[element.name] = rules = {};\n            valInfo.options.messages[element.name] = messages = {};\n\n            $.each(this.adapters, function () {\n                var prefix = \"data-val-\" + this.name,\n                    message = $element.attr(prefix),\n                    paramValues = {};\n\n                if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)\n                    prefix += \"-\";\n\n                    $.each(this.params, function () {\n                        paramValues[this] = $element.attr(prefix + this);\n                    });\n\n                    this.adapt({\n                        element: element,\n                        form: form,\n                        message: message,\n                        params: paramValues,\n                        rules: rules,\n                        messages: messages\n                    });\n                }\n            });\n\n            $.extend(rules, { \"__dummy__\": true });\n\n            if (!skipAttach) {\n                valInfo.attachValidation();\n            }\n        },\n\n        parse: function (selector) {\n            /// <summary>\n            /// Parses all the HTML elements in the specified selector. It looks for input elements decorated\n            /// with the [data-val=true] attribute value and enables validation according to the data-val-*\n            /// attribute values.\n            /// </summary>\n            /// <param name=\"selector\" type=\"String\">Any valid jQuery selector.</param>\n\n            // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one\n            // element with data-val=true\n            var $selector = $(selector),\n                $forms = $selector.parents()\n                    .addBack()\n                    .filter(\"form\")\n                    .add($selector.find(\"form\"))\n                    .has(\"[data-val=true]\");\n\n            $selector.find(\"[data-val=true]\").each(function () {\n                $jQval.unobtrusive.parseElement(this, true);\n            });\n\n            $forms.each(function () {\n                var info = validationInfo(this);\n                if (info) {\n                    info.attachValidation();\n                }\n            });\n        }\n    };\n\n    adapters = $jQval.unobtrusive.adapters;\n\n    adapters.add = function (adapterName, params, fn) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n        /// <param name=\"params\" type=\"Array\" optional=\"true\">[Optional] An array of parameter names (strings) that will\n        /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and\n        /// mmmm is the parameter name).</param>\n        /// <param name=\"fn\" type=\"Function\">The function to call, which adapts the values from the HTML\n        /// attributes into jQuery Validate rules and/or messages.</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        if (!fn) {  // Called with no params, just a function\n            fn = params;\n            params = [];\n        }\n        this.push({ name: adapterName, params: params, adapt: fn });\n        return this;\n    };\n\n    adapters.addBool = function (adapterName, ruleName) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n        /// the jQuery Validate validation rule has no parameter values.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n        /// <param name=\"ruleName\" type=\"String\" optional=\"true\">[Optional] The name of the jQuery Validate rule. If not provided, the value\n        /// of adapterName will be used instead.</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        return this.add(adapterName, function (options) {\n            setValidationValues(options, ruleName || adapterName, true);\n        });\n    };\n\n    adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n        /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and\n        /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n        /// <param name=\"minRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you only\n        /// have a minimum value.</param>\n        /// <param name=\"maxRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you only\n        /// have a maximum value.</param>\n        /// <param name=\"minMaxRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you\n        /// have both a minimum and maximum value.</param>\n        /// <param name=\"minAttribute\" type=\"String\" optional=\"true\">[Optional] The name of the HTML attribute that\n        /// contains the minimum value. The default is \"min\".</param>\n        /// <param name=\"maxAttribute\" type=\"String\" optional=\"true\">[Optional] The name of the HTML attribute that\n        /// contains the maximum value. The default is \"max\".</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        return this.add(adapterName, [minAttribute || \"min\", maxAttribute || \"max\"], function (options) {\n            var min = options.params.min,\n                max = options.params.max;\n\n            if (min && max) {\n                setValidationValues(options, minMaxRuleName, [min, max]);\n            }\n            else if (min) {\n                setValidationValues(options, minRuleName, min);\n            }\n            else if (max) {\n                setValidationValues(options, maxRuleName, max);\n            }\n        });\n    };\n\n    adapters.addSingleVal = function (adapterName, attribute, ruleName) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n        /// the jQuery Validate validation rule has a single value.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>\n        /// <param name=\"attribute\" type=\"String\">[Optional] The name of the HTML attribute that contains the value.\n        /// The default is \"val\".</param>\n        /// <param name=\"ruleName\" type=\"String\" optional=\"true\">[Optional] The name of the jQuery Validate rule. If not provided, the value\n        /// of adapterName will be used instead.</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        return this.add(adapterName, [attribute || \"val\"], function (options) {\n            setValidationValues(options, ruleName || adapterName, options.params[attribute]);\n        });\n    };\n\n    $jQval.addMethod(\"__dummy__\", function (value, element, params) {\n        return true;\n    });\n\n    $jQval.addMethod(\"regex\", function (value, element, params) {\n        var match;\n        if (this.optional(element)) {\n            return true;\n        }\n\n        match = new RegExp(params).exec(value);\n        return (match && (match.index === 0) && (match[0].length === value.length));\n    });\n\n    $jQval.addMethod(\"nonalphamin\", function (value, element, nonalphamin) {\n        var match;\n        if (nonalphamin) {\n            match = value.match(/\\W/g);\n            match = match && match.length >= nonalphamin;\n        }\n        return match;\n    });\n\n    if ($jQval.methods.extension) {\n        adapters.addSingleVal(\"accept\", \"mimtype\");\n        adapters.addSingleVal(\"extension\", \"extension\");\n    } else {\n        // for backward compatibility, when the 'extension' validation method does not exist, such as with versions\n        // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for\n        // validating the extension, and ignore mime-type validations as they are not supported.\n        adapters.addSingleVal(\"extension\", \"extension\", \"accept\");\n    }\n\n    adapters.addSingleVal(\"regex\", \"pattern\");\n    adapters.addBool(\"creditcard\").addBool(\"date\").addBool(\"digits\").addBool(\"email\").addBool(\"number\").addBool(\"url\");\n    adapters.addMinMax(\"length\", \"minlength\", \"maxlength\", \"rangelength\").addMinMax(\"range\", \"min\", \"max\", \"range\");\n    adapters.addMinMax(\"minlength\", \"minlength\").addMinMax(\"maxlength\", \"minlength\", \"maxlength\");\n    adapters.add(\"equalto\", [\"other\"], function (options) {\n        var prefix = getModelPrefix(options.element.name),\n            other = options.params.other,\n            fullOtherName = appendModelPrefix(other, prefix),\n            element = $(options.form).find(\":input\").filter(\"[name='\" + escapeAttributeValue(fullOtherName) + \"']\")[0];\n\n        setValidationValues(options, \"equalTo\", element);\n    });\n    adapters.add(\"required\", function (options) {\n        // jQuery Validate equates \"required\" with \"mandatory\" for checkbox elements\n        if (options.element.tagName.toUpperCase() !== \"INPUT\" || options.element.type.toUpperCase() !== \"CHECKBOX\") {\n            setValidationValues(options, \"required\", true);\n        }\n    });\n    adapters.add(\"remote\", [\"url\", \"type\", \"additionalfields\"], function (options) {\n        var value = {\n            url: options.params.url,\n            type: options.params.type || \"GET\",\n            data: {}\n        },\n            prefix = getModelPrefix(options.element.name);\n\n        $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {\n            var paramName = appendModelPrefix(fieldName, prefix);\n            value.data[paramName] = function () {\n                var field = $(options.form).find(\":input\").filter(\"[name='\" + escapeAttributeValue(paramName) + \"']\");\n                // For checkboxes and radio buttons, only pick up values from checked fields.\n                if (field.is(\":checkbox\")) {\n                    return field.filter(\":checked\").val() || field.filter(\":hidden\").val() || '';\n                }\n                else if (field.is(\":radio\")) {\n                    return field.filter(\":checked\").val() || '';\n                }\n                return field.val();\n            };\n        });\n\n        setValidationValues(options, \"remote\", value);\n    });\n    adapters.add(\"password\", [\"min\", \"nonalphamin\", \"regex\"], function (options) {\n        if (options.params.min) {\n            setValidationValues(options, \"minlength\", options.params.min);\n        }\n        if (options.params.nonalphamin) {\n            setValidationValues(options, \"nonalphamin\", options.params.nonalphamin);\n        }\n        if (options.params.regex) {\n            setValidationValues(options, \"regex\", options.params.regex);\n        }\n    });\n    adapters.add(\"fileextensions\", [\"extensions\"], function (options) {\n        setValidationValues(options, \"extension\", options.params.extensions);\n    });\n\n    $(function () {\n        $jQval.unobtrusive.parse(document);\n    });\n\n    return $jQval.unobtrusive;\n}));\n"]},"metadata":{},"sourceType":"script"}